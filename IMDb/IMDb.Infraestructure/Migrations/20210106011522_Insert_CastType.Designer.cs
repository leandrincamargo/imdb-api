// <auto-generated />
using System;
using IMDb.Infraestructure.DBConfiguration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMDb.Infraestructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210106011522_Insert_CastType")]
    partial class Insert_CastType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("IMDb.Domain.Entities.Cast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<byte>("CastTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CastTypeId");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.CastOfMovie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CastId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.CastType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CastType");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Genre", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("GenreId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("MovieRelease")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("MovieScaleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieScaleId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.MovieClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("MovieScaleId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieScaleId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieClassification");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.MovieScale", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovieScale");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Cast", b =>
                {
                    b.HasOne("IMDb.Domain.Entities.CastType", "CastType")
                        .WithMany("Casts")
                        .HasForeignKey("CastTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CastType");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.CastOfMovie", b =>
                {
                    b.HasOne("IMDb.Domain.Entities.Cast", "Cast")
                        .WithMany("CastOfMovies")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDb.Domain.Entities.Movie", "Movie")
                        .WithMany("CastOfMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Movie", b =>
                {
                    b.HasOne("IMDb.Domain.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDb.Domain.Entities.MovieScale", null)
                        .WithMany("Movies")
                        .HasForeignKey("MovieScaleId");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.MovieClassification", b =>
                {
                    b.HasOne("IMDb.Domain.Entities.Movie", "Movie")
                        .WithMany("MoviesClassification")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDb.Domain.Entities.MovieScale", "Vote")
                        .WithMany()
                        .HasForeignKey("MovieScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDb.Domain.Entities.User", "User")
                        .WithMany("MoviesClassification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.User", b =>
                {
                    b.HasOne("IMDb.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Cast", b =>
                {
                    b.Navigation("CastOfMovies");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.CastType", b =>
                {
                    b.Navigation("Casts");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Movie", b =>
                {
                    b.Navigation("CastOfMovies");

                    b.Navigation("MoviesClassification");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.MovieScale", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("IMDb.Domain.Entities.User", b =>
                {
                    b.Navigation("MoviesClassification");
                });
#pragma warning restore 612, 618
        }
    }
}
